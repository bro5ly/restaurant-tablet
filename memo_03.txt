# キッチンUI実装とAPI修正 - 変更内容

## 実装日
2025-01-XX

## 概要
キッチン側のUIを実装し、リアルタイムで注文状況を管理できるシステムを構築しました。

## 変更されたファイル

### 1. /src/app/api/orders/category/route.ts
**変更内容:**
- APIのロジックを完全に書き直し
- クエリパラメータを `categoryId` から `status` に変更
- 注文全体の情報を取得するように修正（OrderItemだけでなくOrder情報も含む）
- 必要なリレーションを全て含むようにクエリを修正

**主な変更:**
```typescript
// 変更前: OrderItemのみを取得
const orders = await prisma.orderItem.findMany({
  where: {
    categoryId: categoryId ? parseInt(categoryId) : 2,
    statusId: { in: [2, 3] },
  },
});

// 変更後: Order全体を取得（関連データも含む）
const orders = await prisma.order.findMany({
  where: {
    status: {
      name: status as any || "CONFIRM"
    }
  },
  include: {
    table: true,
    status: true,
    orderItems: {
      include: {
        menu: {
          include: {
            category: true
          }
        },
        category: true,
        status: true
      },
      orderBy: {
        categoryId: "asc"
      }
    }
  },
});
```

### 2. /src/app/api/orders/update/[id]/route.ts
**変更内容:**
- HTTPメソッドを `GET` から `PATCH` に変更
- 固定の statusId（3）ではなく、動的にステータスを更新
- 注文の全体的なステータス更新（OrderとOrderItemの両方）
- より詳細なエラーハンドリング

**主な変更:**
```typescript
// 変更前: 固定でstatusId=3に更新
const orderItem = await prisma.orderItem.update({
  where: { id: orderId },
  data: { statusId: 3 },
});

// 変更後: 動的にステータスを更新
const statusRecord = await prisma.status.findFirst({
  where: { name: status }
});

const updatedOrder = await prisma.order.update({
  where: { id: orderId },
  data: {
    statusId: statusRecord.id,
    orderItems: {
      updateMany: {
        where: { orderId: orderId },
        data: { statusId: statusRecord.id }
      }
    }
  },
  // 全ての関連データを含める
});
```

### 3. /src/app/kitchen/page.tsx
**変更内容:**
- 完全に書き直し、リアクティブなUIに変更
- モックデータを削除し、リアルAPIとの連携を実装
- 状態管理（loading, updating）を追加
- 自動更新機能（30秒間隔）を実装

**主な機能:**
- 注文の取得（CONFIRM, COOKING, READY状態別）
- 注文状態の更新（ボタンクリックで次の状態に遷移）
- リアルタイムでのUI更新
- カテゴリー別商品表示
- エラーハンドリング

**APIとの連携:**
```typescript
// 注文データ取得
const [confirmed, cooking, ready] = await Promise.all([
  fetch('/api/orders/category?status=CONFIRM'),
  fetch('/api/orders/category?status=COOKING'),
  fetch('/api/orders/category?status=READY')
]);

// 状態更新
const response = await fetch(`/api/orders/update/${orderId}`, {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ status: newStatus })
});
```

### 4. /src/types/menu.ts
**変更内容:**
- Order インターフェースに `createdAt` フィールドを追加

```typescript
interface Order {
  // 既存のフィールド...
  createdAt: Date; // 追加
}
```

## 新機能

### キッチンディスプレイ機能
1. **三段階の注文管理**
   - 確認済み注文 (CONFIRM)
   - 調理中 (COOKING) 
   - 完成済み (READY)

2. **注文状態更新**
   - 確認済み → 調理開始 → 完了 → 配膳完了
   - ボタンクリックで状態遷移

3. **リアルタイム更新**
   - 30秒間隔での自動データ更新
   - 手動更新ボタン

4. **カテゴリー別表示**
   - セットメニュー
   - 単品
   - サイドメニュー
   - ドリンク・デザート

## データベース設計の考慮事項

### Status管理
- ステータス名（文字列）からIDを動的に取得
- Order と OrderItem の両方でステータス管理

### リレーション
- Order ← OrderItem ← Menu ← Category
- Order ← Table
- Order/OrderItem ← Status

## 今後の拡張可能性

1. **WebSocket実装**
   - リアルタイム通知
   - 複数デバイス間での同期

2. **フィルタリング機能**
   - 時間帯別
   - テーブル別
   - 優先度別

3. **統計機能**
   - 調理時間の計測
   - パフォーマンス分析

## 注意事項

1. **API変更**
   - `/api/orders/category` のクエリパラメータが変更
   - `/api/orders/update/[id]` のHTTPメソッドがPATCHに変更

2. **型定義の更新**
   - Order インターフェースに `createdAt` を追加

3. **エラーハンドリング**
   - ネットワークエラー時の処理
   - 無効なステータス遷移の防止

## 追加実装（WebSocket通知機能）

### 5. /src/app/ui_test/page.tsx
**変更内容:**
- 注文確定時のデータ送信形式を簡略化
- 不要なフィールドを削除してAPIとの整合性を向上

```typescript
// 変更後: シンプルなデータ形式
const orderData = {
  tableId: 1,
  orderItems: orderItems,
};
```

### 6. /src/app/kitchen/page.tsx - WebSocket接続
**変更内容:**
- WebSocket接続を追加してリアルタイム更新を実現
- 注文作成・更新時に自動でデータを再取得

```typescript
// WebSocket接続設定
const ws = new WebSocket('ws://localhost:3001');

ws.onmessage = (event) => {
  const message = JSON.parse(event.data);
  if (message.type === 'order-updated' || message.type === 'order-status-updated') {
    fetchOrders(); // 自動でデータ再取得
  }
};
```

### 7. API通知機能の有効化
- `/api/orders/route.ts`: 注文作成時にWebSocket通知を送信
- `/api/orders/update/[id]/route.ts`: 状態更新時にWebSocket通知を送信

```typescript
// 注文作成時
broadcast(JSON.stringify({ type: "order-updated", order: createdOrder }));

// 状態更新時
broadcast(JSON.stringify({ type: "order-status-updated", order: updatedOrder }));
```

### 8. 注文番号の適切な返却
**変更内容:**
- 注文作成APIで適切な注文番号を返却

```typescript
return NextResponse.json({
  ...createdOrder,
  orderNumber: `ORDER-${createdOrder.id}`
});
```

## WebSocket通知システム

### 動作フロー
1. **注文確定**: ui_test → API → データベース保存 → WebSocket通知
2. **キッチンUI**: WebSocket受信 → 自動データ更新 → UI再描画
3. **状態更新**: キッチンUI → API → データベース更新 → WebSocket通知 → 全画面更新

### メッセージ形式
```json
{
  "type": "order-updated",
  "order": { /* 注文データ */ }
}

{
  "type": "order-status-updated", 
  "order": { /* 更新された注文データ */ }
}
```

### WebSocketサーバー起動
```bash
# ターミナルで実行
node websocket-server.ts
# または
ts-node websocket-server.ts
```

ポート3001でWebSocketサーバーが起動し、リアルタイム通知が動作します。

## 追加実装（注文進捗・通知機能）

### 9. /src/app/api/orders/table/[tableId]/route.ts
**新規作成:**
- テーブル別の注文進捗を取得するAPI
- 配膳前の注文（CONFIRM, COOKING, READY状態）のみを取得

```typescript
// テーブル指定で進行中の注文を取得
const orders = await prisma.order.findMany({
  where: {
    tableId: parseInt(tableId),
    status: {
      name: { in: ["CONFIRM", "COOKING", "READY"] }
    }
  },
  // 関連データも含めて取得
});
```

### 10. /src/app/ui_test/page.tsx - 注文進捗・通知機能
**変更内容:**
- 注文進捗モーダル機能を追加
- WebSocket通知受信機能を追加
- 状態変更通知モーダルを追加

**主な機能:**
1. **注文状況ボタン**: 「注文履歴」を「注文状況」に変更し、クリックで進捗モーダル表示
2. **進捗モーダル**: 現在進行中の注文一覧を表示（確認済み、調理中、完成）
3. **WebSocket通知**: 調理開始・完成時に自動でポップアップ表示

**WebSocket通知機能:**
```typescript
ws.onmessage = (event) => {
  const message = JSON.parse(event.data);
  if (message.type === 'order-status-updated') {
    // 状態に応じたメッセージ表示
    const statusMessages = {
      'COOKING': '調理を開始いたします',
      'READY': 'お料理が完成いたしました！',
      'SERVED': 'お料理をお持ちいたします'
    };
    
    setStatusNotification({
      orderId: order.id,
      status: statusName,
      message: statusMessage
    });
    setIsStatusNotificationModalOpen(true);
  }
};
```

**進捗表示機能:**
```typescript
const handleOrderProgressClick = async () => {
  const tableId = 1;
  const response = await fetch(`/api/orders/table/${tableId}`);
  const orders = await response.json();
  
  setOrderProgress(orders);
  setIsOrderProgressModalOpen(true);
};
```

## 通知システムの動作フロー

### 顧客側（ui_test）の体験
1. **注文確定**: 注文確定ボタンクリック → 注文完了モーダル表示
2. **進捗確認**: 「注文状況」ボタンクリック → 進行中注文の一覧表示
3. **リアルタイム通知**: 
   - 調理開始時: 👨‍🍳「調理を開始いたします」
   - 完成時: 🍽️「お料理が完成いたしました！」
   - 配膳時: ✨「お料理をお持ちいたします」

### システム間連携
1. **注文確定**: ui_test → API → DB → WebSocket → キッチンUI自動更新
2. **状態更新**: キッチンUI → API → DB → WebSocket → ui_test通知表示
3. **進捗確認**: ui_test → 進捗API → 現在の注文状況表示

## 新しいUI要素

### 注文進捗モーダル
- 注文番号、注文時間、状態バッジ
- 注文内容の詳細表示
- 合計金額表示
- 状態別色分け（確認済み: 青、調理中: オレンジ、完成: 緑）

### 状態変更通知モーダル
- 大きな絵文字アイコン
- 注文番号の表示
- 状態に応じたメッセージ
- シンプルなOKボタン

---

## 以前の実装履歴

### ui_testページの機能
1. **メニュー詳細モーダル**: メニューカードクリック時に詳細情報を表示
2. **サイドメニュー選択機能**: 利用可能なサイドメニューの追加・数量選択
3. **数量選択機能**: メインメニューの数量を選択
4. **注文完了通知モーダル**: カートへの追加完了時に通知表示

### モーダルの構造
#### メニュー詳細モーダル
- **左側（1:1）**:
  - メニュー画像（大きなアイコン表示）
  - メニュー名と説明
  - カテゴリーバッジ
  - アレルギー情報（バッジ形式で横並び表示）
  - 基本価格

- **右側（1:1）**:
  - サイドメニュー選択エリア（+/-ボタンで数量調整）
  - 数量選択エリア（+/-ボタンで調整）
  - 合計金額表示
  - カートに追加ボタン

#### 注文完了モーダル
- シンプルな完了通知
- OKボタンでモーダルを閉じる

### UI改善
1. **shadcn/ui コンポーネントの活用**:
   - Dialog: モーダル表示
   - Badge: カテゴリー・アレルギー表示
   - Button: 各種ボタン

2. **メニューカードの改善**:
   - カテゴリー表示をshadcn Badgeに変更
   - 追加ボタンを削除（クリックでモーダル表示に変更）

### API連携
- `api/menu/detail/[id]` を使用してメニュー詳細情報を取得
- アレルギー情報、サイドメニュー情報も含めて表示

### 状態管理の改善
- モーダルの開閉状態管理
- サイドメニューの選択状態管理
- 数量選択の状態管理
- モーダル内での合計金額計算

### アイコン・表示
- アレルギー情報に対応する絵文字アイコンを表示
- 現代的でユーザーフレンドリーなUI設計