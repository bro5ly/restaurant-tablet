// "use client";
// import React, { useState, useEffect } from "react";
// import { useMenus } from "@/hooks/useMenu";
// import { useDetail } from "@/hooks/useDetail";
// import { useAtom } from "jotai";
// import { useRouter } from "next/navigation";
// import {
//   cartAtom,
//   addAtom,
//   removeAtom,
//   clearCartAtom,
//   CartItem,
//   tableInfoAtom,
// } from "@/atoms/atom";
// import { MenuItem, Categories } from "@/types/menu";

// // Component imports
// import Header from "@/components/ui_test/Header";
// import CategoryTabs from "@/components/ui_test/CategoryTabs";
// import MenuGrid from "@/components/ui_test/MenuGrid";
// import MenuDetailModal from "@/components/ui_test/MenuDetailModal";
// import CartModal from "@/components/ui_test/CartModal";
// import EditItemModal from "@/components/ui_test/EditItemModal";
// import ConfirmationModals from "@/components/ui_test/ConfirmationModals";
// import OrderHistoryModal from "@/components/ui_test/OrderHistoryModal";
// import StatusNotificationModal from "@/components/ui_test/StatusNotificationModal";
// import OrderProgressModal from "@/components/ui_test/OrderProgressModal";

// const categories: { name: Categories; label: string }[] = [
//   { name: "SET", label: "メイン" },
//   { name: "SINGLE", label: "単品" },
//   { name: "SIDE", label: "サイド" },
//   { name: "DRINK_DESERT", label: "ドリンク・デザート" },
// ];

// const UiTestPage = () => {
//   const [selectedCategory, setSelectedCategory] = useState<Categories>("SET");
//   const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
//   const [selectedMenuId, setSelectedMenuId] = useState<number | null>(null);
//   const [quantity, setQuantity] = useState(1);
//   const [selectedSides, setSelectedSides] = useState<number[]>([]);
//   const [selectedAllergies, setSelectedAllergies] = useState<string[]>([]);
//   const [currentPage, setCurrentPage] = useState(0);
//   const itemsPerPage = 9;

//   // Cart related states
//   const [cart, setCart] = useAtom(cartAtom);
//   const [, addToCart] = useAtom(addAtom);
//   const [, removeFromCart] = useAtom(removeAtom);
//   const [, clearCart] = useAtom(clearCartAtom);
//   const [isCartModalOpen, setIsCartModalOpen] = useState(false);

//   // Edit item states
//   const [isEditModalOpen, setIsEditModalOpen] = useState(false);
//   const [editingItem, setEditingItem] = useState<any>(null);
//   const [editQuantity, setEditQuantity] = useState(1);
//   const [editSelectedSides, setEditSelectedSides] = useState<number[]>([]);
//   const [editSelectedAllergies, setEditSelectedAllergies] = useState<string[]>([]);

//   // Confirmation modal states
//   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
//   const [isClearCartModalOpen, setIsClearCartModalOpen] = useState(false);
//   const [deletingItem, setDeletingItem] = useState<any>(null);

//   // Order related states
//   const [isOrderHistoryModalOpen, setIsOrderHistoryModalOpen] = useState(false);
//   const [isOrderProgressModalOpen, setIsOrderProgressModalOpen] = useState(false);
//   const [orderHistory, setOrderHistory] = useState<any[]>([]);
//   const [progressOrders, setProgressOrders] = useState<any[]>([]);
//   const [historyLoading, setHistoryLoading] = useState(false);
//   const [progressLoading, setProgressLoading] = useState(false);

//   // WebSocket and notification states
//   const [socket, setSocket] = useState<WebSocket | null>(null);
//   const [isStatusNotificationModalOpen, setIsStatusNotificationModalOpen] = useState(false);
//   const [statusNotification, setStatusNotification] = useState<any>(null);

//   // Table info
//   const [tableInfo] = useAtom(tableInfoAtom);
//   const router = useRouter();

//   // Hooks
//   const { menus, loading, error } = useMenus();
//   const { detail, detailLoading, detailError } = useDetail(selectedMenuId);

//   // WebSocket setup
//   useEffect(() => {
//     const ws = new WebSocket("ws://localhost:3001");

//     ws.onopen = () => {
//       console.log("WebSocket接続が確立されました");
//       ws.send(
//         JSON.stringify({
//           type: "register",
//           tableId: tableInfo.tableId,
//           clientType: "tablet",
//         })
//       );
//     };

//     ws.onmessage = (event) => {
//       try {
//         const message = JSON.parse(event.data);
//         console.log("WebSocketメッセージを受信:", message);

//         if (message.type === "statusUpdate" && message.data) {
//           const { order } = message.data;
//           const menuNames = order.orderItems?.map((item: any) => item.menu?.name || 'メニュー名不明') || [];

//           setStatusNotification({
//             orderId: order.id,
//             status: order.status,
//             message: message.data.message,
//             menuNames: menuNames,
//           });
//           setIsStatusNotificationModalOpen(true);
//         }
//       } catch (error) {
//         console.error("WebSocketメッセージの解析エラー:", error);
//       }
//     };

//     ws.onclose = () => {
//       console.log("WebSocket接続が閉じられました");
//     };

//     ws.onerror = (error) => {
//       console.error("WebSocketエラー:", error);
//     };

//     setSocket(ws);

//     return () => {
//       ws.close();
//     };
//   }, [tableInfo.tableId]);

//   // Utility functions
//   const hasSelectedAllergy = (menu: MenuItem) => {
//     if (!menu.allergies) return false;
//     return menu.allergies.some((allergy) =>
//       selectedAllergies.includes(allergy.id)
//     );
//   };

//   const toggleAllergy = (allergyId: string) => {
//     setSelectedAllergies((prev) =>
//       prev.includes(allergyId)
//         ? prev.filter((id) => id !== allergyId)
//         : [...prev, allergyId]
//     );
//   };

//   const getAllergyDisplayName = (allergyName: string) => {
//     const allergyMap: { [key: string]: string } = {
//       WHEAT: "小麦",
//       EGG: "卵",
//       MILK: "乳",
//       SOY: "大豆",
//       PEANUT: "落花生",
//       SHRIMP: "えび",
//       CRAB: "かに",
//       BUCKWHEAT: "そば",
//     };
//     return allergyMap[allergyName] || allergyName;
//   };

//   const toggleSideSelection = (sideId: number) => {
//     setSelectedSides((prev) =>
//       prev.includes(sideId)
//         ? prev.filter((id) => id !== sideId)
//         : [...prev, sideId]
//     );
//   };

//   const getCartDisplayItems = () => {
//     return cart.map((item) => {
//       const sidesInfo = item.sides || [];
//       const allergiesInfo = item.allergies || [];

//       return {
//         menuId: item.menuId,
//         cartItemId: item.cartItemId,
//         name: item.name,
//         price: item.price,
//         quantity: item.quantity,
//         sides: sidesInfo,
//         allergies: allergiesInfo,
//         basePrice: item.basePrice || item.price,
//         availableSides: item.availableSides || [],
//         availableAllergies: item.availableAllergies || [],
//       };
//     });
//   };

//   const getTotalPrice = () => {
//     return cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
//   };

//   const getTotalItems = () => {
//     return cart.reduce((sum, item) => sum + item.quantity, 0);
//   };

//   const calculateModalTotal = () => {
//     if (!detail) return 0;
//     let total = detail.price * quantity;
//     selectedSides.forEach((sideId) => {
//       const side = detail.sides?.find((s) => s.id === sideId);
//       if (side) {
//         total += side.price * quantity;
//       }
//     });
//     return total;
//   };

//   const getModalBreakdown = () => {
//     if (!detail) return { basePrice: 0, sidesTotal: 0, total: 0 };

//     const basePrice = detail.price * quantity;
//     let sidesTotal = 0;

//     selectedSides.forEach((sideId) => {
//       const side = detail.sides?.find((s) => s.id === sideId);
//       if (side) {
//         sidesTotal += side.price * quantity;
//       }
//     });

//     return {
//       basePrice,
//       sidesTotal,
//       total: basePrice + sidesTotal,
//     };
//   };

//   // Event handlers
//   const handleMenuClick = (menuId: number) => {
//     setSelectedMenuId(menuId);
//     setIsDetailModalOpen(true);
//     setQuantity(1);
//     setSelectedSides([]);
//     setSelectedAllergies([]);
//   };

//   const handleCartItemClick = (item: any) => {
//     setEditingItem(item);
//     setEditQuantity(item.quantity);
//     setEditSelectedSides(
//       item.sides?.map((side: any) => side.id) || []
//     );
//     setEditSelectedAllergies(
//       item.allergies || []
//     );
//     setIsEditModalOpen(true);
//   };

//   const handleAddToCart = () => {
//     if (!detail) return;

//     const sidesInfo = selectedSides
//       .map((sideId) => {
//         const side = detail.sides?.find((s) => s.id === sideId);
//         return side ? { id: side.id, name: side.name, price: side.price } : null;
//       })
//       .filter((side) => side !== null);

//     const allergiesInfo = selectedAllergies
//       .map((allergyId) => {
//         const allergy = detail.allergies?.find((a) => a.id === allergyId);
//         return allergy ? getAllergyDisplayName(allergy.name) : null;
//       })
//       .filter((allergy) => allergy !== null);

//     const totalItemPrice = calculateModalTotal() / quantity;

//     const cartItem: CartItem = {
//       categoryId: detail.categoryId,
//       menuId: detail.id,
//       quantity: quantity,
//       statusId: 1,
//       price: totalItemPrice,
//       name: detail.name,
//       sides: sidesInfo,
//       allergies: allergiesInfo,
//       basePrice: detail.price,
//       availableSides: detail.sides || [],
//       availableAllergies: detail.allergies || [],
//     };

//     addToCart(cartItem);
//     setIsDetailModalOpen(false);
//     setQuantity(1);
//     setSelectedSides([]);
//     setSelectedAllergies([]);
//   };

//   const handleUpdateCartItem = () => {
//     if (!editingItem) return;

//     const sidesInfo = editSelectedSides
//       .map((sideId) => {
//         const side = editingItem.availableSides?.find((s: any) => s.id === sideId);
//         return side ? { id: side.id, name: side.name, price: side.price } : null;
//       })
//       .filter((side) => side !== null);

//     const allergiesInfo = editSelectedAllergies
//       .map((allergyId) => {
//         const allergy = editingItem.availableAllergies?.find((a: any) => a.id === allergyId);
//         return allergy ? getAllergyDisplayName(allergy.name) : null;
//       })
//       .filter((allergy) => allergy !== null);

//     let totalItemPrice = editingItem.basePrice;
//     editSelectedSides.forEach((sideId) => {
//       const side = editingItem.availableSides?.find((s: any) => s.id === sideId);
//       if (side) {
//         totalItemPrice += side.price;
//       }
//     });

//     const updatedCartItems = cart.map((item) =>
//       item.cartItemId === editingItem.cartItemId
//         ? {
//             ...item,
//             quantity: editQuantity,
//             price: totalItemPrice,
//             sides: sidesInfo,
//             allergies: allergiesInfo,
//           }
//         : item
//     );

//     setCart(updatedCartItems);
//     setIsEditModalOpen(false);
//   };

//   const handleRemoveCartItem = () => {
//     if (deletingItem) {
//       removeFromCart(deletingItem);
//       setIsDeleteModalOpen(false);
//       setDeletingItem(null);
//     }
//   };

//   const handleDeleteClick = (item: any) => {
//     setDeletingItem(item);
//     setIsDeleteModalOpen(true);
//   };

//   const confirmDelete = () => {
//     handleRemoveCartItem();
//   };

//   const cancelDelete = () => {
//     setIsDeleteModalOpen(false);
//     setDeletingItem(null);
//   };

//   const handleClearCartClick = () => {
//     setIsClearCartModalOpen(true);
//   };

//   const confirmClearCart = () => {
//     clearCart();
//     setIsClearCartModalOpen(false);
//   };

//   const cancelClearCart = () => {
//     setIsClearCartModalOpen(false);
//   };

//   const handleOrderConfirm = async () => {
//     try {
//       const orderItems = cart.map((item) => ({
//         menuId: item.menuId,
//         quantity: item.quantity,
//         price: item.price,
//         sides: item.sides || [],
//         allergies: item.allergies || [],
//       }));

//       const response = await fetch("/api/orders", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({
//           tableId: tableInfo.tableId,
//           items: orderItems,
//         }),
//       });

//       if (response.ok) {
//         clearCart();
//         setIsCartModalOpen(false);
//         alert("注文が完了しました！");
//       } else {
//         throw new Error("注文の送信に失敗しました");
//       }
//     } catch (error) {
//       console.error("注文エラー:", error);
//       alert("注文に失敗しました。もう一度お試しください。");
//     }
//   };

//   const handleOrderProgressClick = async () => {
//     setProgressLoading(true);
//     setIsOrderProgressModalOpen(true);
//     try {
//       const response = await fetch(`/api/orders/table/${tableInfo.tableId}?includeServed=false`);
//       if (response.ok) {
//         const data = await response.json();
//         setProgressOrders(data);
//       } else {
//         setProgressOrders([]);
//       }
//     } catch (error) {
//       console.error("注文進捗取得エラー:", error);
//       setProgressOrders([]);
//     } finally {
//       setProgressLoading(false);
//     }
//   };

//   const handleOrderHistoryClick = async () => {
//     setHistoryLoading(true);
//     setIsOrderHistoryModalOpen(true);
//     try {
//       const response = await fetch(`/api/orders/table/${tableInfo.tableId}?includeServed=true`);
//       if (response.ok) {
//         const data = await response.json();
//         setOrderHistory(data);
//       } else {
//         setOrderHistory([]);
//       }
//     } catch (error) {
//       console.error("注文履歴取得エラー:", error);
//       setOrderHistory([]);
//     } finally {
//       setHistoryLoading(false);
//     }
//   };

//   // Pagination
//   const nextPage = () => {
//     const filteredMenus = menus.filter((menu) => menu.category.name === selectedCategory);
//     const totalPages = Math.ceil(filteredMenus.length / itemsPerPage);
//     if (currentPage < totalPages - 1) {
//       setCurrentPage(currentPage + 1);
//     }
//   };

//   const prevPage = () => {
//     if (currentPage > 0) {
//       setCurrentPage(currentPage - 1);
//     }
//   };

//   // Get filtered and paginated menus
//   const filteredMenus = menus.filter(
//     (menu) => menu.category.name === selectedCategory
//   );
//   const totalPages = Math.ceil(filteredMenus.length / itemsPerPage);
//   const paginatedMenus = filteredMenus.slice(
//     currentPage * itemsPerPage,
//     (currentPage + 1) * itemsPerPage
//   );

//   // Reset page when category changes
//   useEffect(() => {
//     setCurrentPage(0);
//   }, [selectedCategory]);

//   if (loading) {
//     return (
//       <div className="min-h-screen flex items-center justify-center">
//         <div className="text-center">
//           <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto mb-4"></div>
//           <p>メニューを読み込み中...</p>
//         </div>
//       </div>
//     );
//   }

//   if (error) {
//     return (
//       <div className="min-h-screen flex items-center justify-center">
//         <div className="text-center text-red-600">
//           <p>エラーが発生しました: {error}</p>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div className="min-h-screen flex items-center justify-center p-4 bg-gray-100">
//       <div
//         className="bg-white rounded-lg shadow-lg overflow-hidden flex flex-col"
//         style={{
//           width: "min(1280px, 95vw)",
//           height: "min(800px, 80vh)",
//         }}
//       >
//         <Header
//           tableInfo={tableInfo}
//           totalItems={getTotalItems()}
//           onOrderHistoryClick={handleOrderHistoryClick}
//           onCartClick={() => setIsCartModalOpen(true)}
//         />

//         <CategoryTabs
//           categories={categories}
//           selectedCategory={selectedCategory}
//           onCategoryChange={setSelectedCategory}
//           currentPage={currentPage}
//           totalPages={totalPages}
//           onPrevPage={prevPage}
//           onNextPage={nextPage}
//         />

//         <MenuGrid menus={paginatedMenus} onMenuClick={handleMenuClick} />

//         {/* All Modals */}
//         <MenuDetailModal
//           isOpen={isDetailModalOpen}
//           onOpenChange={setIsDetailModalOpen}
//           menu={detail}
//           quantity={quantity}
//           selectedSides={selectedSides}
//           selectedAllergies={selectedAllergies}
//           onQuantityChange={(change) => setQuantity(Math.max(1, quantity + change))}
//           onSideToggle={toggleSideSelection}
//           onAllergyToggle={toggleAllergy}
//           onAddToCart={handleAddToCart}
//           hasSelectedAllergy={hasSelectedAllergy}
//           getAllergyDisplayName={getAllergyDisplayName}
//           calculateModalTotal={calculateModalTotal}
//           getModalBreakdown={getModalBreakdown}
//         />

//         <CartModal
//           isOpen={isCartModalOpen}
//           onOpenChange={setIsCartModalOpen}
//           cartItems={getCartDisplayItems()}
//           getTotalPrice={getTotalPrice}
//           onItemClick={handleCartItemClick}
//           onDeleteClick={handleDeleteClick}
//           onClearCartClick={handleClearCartClick}
//           onOrderConfirm={handleOrderConfirm}
//         />

//         <EditItemModal
//           isOpen={isEditModalOpen}
//           onOpenChange={setIsEditModalOpen}
//           editingItem={editingItem}
//           editQuantity={editQuantity}
//           editSelectedSides={editSelectedSides}
//           editSelectedAllergies={editSelectedAllergies}
//           onQuantityChange={(change) => setEditQuantity(Math.max(1, editQuantity + change))}
//           onSideToggle={(sideId) => {
//             setEditSelectedSides(prev =>
//               prev.includes(sideId)
//                 ? prev.filter(id => id !== sideId)
//                 : [...prev, sideId]
//             );
//           }}
//           onAllergyToggle={(allergyId) => {
//             setEditSelectedAllergies(prev =>
//               prev.includes(allergyId)
//                 ? prev.filter(id => id !== allergyId)
//                 : [...prev, allergyId]
//             );
//           }}
//           onUpdateCartItem={handleUpdateCartItem}
//           getAllergyDisplayName={getAllergyDisplayName}
//         />

//         <ConfirmationModals
//           isDeleteModalOpen={isDeleteModalOpen}
//           onDeleteModalClose={() => setIsDeleteModalOpen(false)}
//           onConfirmDelete={confirmDelete}
//           onCancelDelete={cancelDelete}
//           deletingItem={deletingItem}
//           isClearCartModalOpen={isClearCartModalOpen}
//           onClearCartModalClose={() => setIsClearCartModalOpen(false)}
//           onConfirmClearCart={confirmClearCart}
//           onCancelClearCart={cancelClearCart}
//         />

//         <OrderHistoryModal
//           isOpen={isOrderHistoryModalOpen}
//           onOpenChange={setIsOrderHistoryModalOpen}
//           historyLoading={historyLoading}
//           orderHistory={orderHistory}
//         />

//         <StatusNotificationModal
//           isOpen={isStatusNotificationModalOpen}
//           onOpenChange={setIsStatusNotificationModalOpen}
//           statusNotification={statusNotification}
//         />

//         <OrderProgressModal
//           isOpen={isOrderProgressModalOpen}
//           onOpenChange={setIsOrderProgressModalOpen}
//           progressLoading={progressLoading}
//           progressOrders={progressOrders}
//         />
//       </div>
//     </div>
//   );
// };

// export default UiTestPage;